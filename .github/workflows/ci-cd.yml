name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: write

jobs:
  lint:
    name: Lint y verificar sintaxis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.9.0'
          cache: 'npm'

      - name: Instalar dependencias
        run: npm install

      - name: Convertir saltos de línea a LF
        run: |
          find . -type f -name "*.js" -not -path "./node_modules/*" -not -path "./dist/*" -exec dos2unix {} \;

      - name: Ejecutar ESLint con fix
        run: npm run lint:fix

      - name: Verificar sintaxis JS
        run: |
          find . -name "*.js" -not -path "./node_modules/*" -not -path "./dist/*" -exec node -c {} \;

      - name: Ejecutar ESLint
        run: npm run lint

      - name: Verificar formato JSON
        run: |
          find . -name "*.json" -not -path "./node_modules/*" -not -path "./dist/*" -exec node -e "JSON.parse(require('fs').readFileSync('{}', 'utf8'))" \;

      - name: Verificar estructura del proyecto
        run: |
          test -f "package.json" || exit 1
          test -f "main.js" || exit 1
          test -f "index.html" || exit 1
          test -d "js" || exit 1
          test -d "js/families" || exit 1
          test -d "js/utils" || exit 1
          echo "✅ Estructura correcta"

  build-linux:
    name: Build en Linux
    runs-on: ubuntu-latest
    needs: lint
    env:
      VERSION: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '22.9.0'
          cache: 'npm'

      - run: npm ci
      - run: timeout 10s npm start || true
      - run: npm run dist

      - name: Crear ZIP Linux con versión
        run: |
          VERSION=$(node -p "require('./package.json').version")
          zip -r electron-app-linux-v$VERSION.zip dist/

      - uses: actions/upload-artifact@v4
        with:
          name: electron-app-linux-zip
          path: electron-app-linux-v${{ env.VERSION }}.zip

  build-windows:
    name: Build en Windows
    runs-on: windows-latest
    needs: lint
    env:
      VERSION: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '22.9.0'
          cache: 'npm'

      - run: npm ci
      - run: timeout 10s npm start || true
      - run: npm run dist

      - name: Crear ZIP Windows con versión
        shell: powershell
        run: |
          $version = (node -p "require('./package.json').version")
          Compress-Archive -Path dist\* -DestinationPath electron-app-windows-v$version.zip

      - uses: actions/upload-artifact@v4
        with:
          name: electron-app-windows-zip
          path: electron-app-windows-v${{ env.VERSION }}.zip

  build-macos:
    name: Build en macOS
    runs-on: macos-latest
    needs: lint
    env:
      VERSION: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '22.9.0'
          cache: 'npm'

      - run: npm ci
      - run: timeout 10s npm start || true
      - run: npm run dist

      - name: Crear ZIP macOS con versión
        run: |
          VERSION=$(node -p "require('./package.json').version")
          zip -r electron-app-macos-v$VERSION.zip dist/

      - uses: actions/upload-artifact@v4
        with:
          name: electron-app-macos-zip
          path: electron-app-macos-v${{ env.VERSION }}.zip

  test:
    name: Ejecutar tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22.9.0'
          cache: 'npm'
      - run: npm ci
      - run: |
          node -c main.js
          node -c server.js
          find js/ -name "*.js" -exec node -c {} \;
          echo "✅ Archivos JS verificados"

  release:
    name: Crear Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '22.9.0'

      - run: npm ci

      - name: Leer versión desde package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          # Borra tag remota y local si existe para evitar errores push
          git tag -d v${{ steps.version.outputs.version }} || true
          git push --delete origin v${{ steps.version.outputs.version }} || true
          git tag v${{ steps.version.outputs.version }}
          git push origin v${{ steps.version.outputs.version }}

      - name: Crear ZIP del proyecto completo
        run: |
          mkdir -p artifacts
          VERSION=${{ steps.version.outputs.version }}
          zip -r artifacts/project-source-v$VERSION.zip . \
            -x "node_modules/**" ".git/**" "dist/**" "artifacts/**" ".github/**" "*.zip"

      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Leer CHANGELOG.md para body del release
        id: changelog
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');
            core.setOutput('body', changelog);

      - name: Crear Release con assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.body }}
          files: |
            artifacts/electron-app-linux-v${{ steps.version.outputs.version }}.zip
            artifacts/electron-app-windows-v${{ steps.version.outputs.version }}.zip
            artifacts/electron-app-macos-v${{ steps.version.outputs.version }}.zip
            artifacts/project-source-v${{ steps.version.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
