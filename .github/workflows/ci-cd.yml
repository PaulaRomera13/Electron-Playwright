name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: write

jobs:
  lint:
    name: Lint y verificar sintaxis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.9.0'
        cache: 'npm'

    - name: Instalar dependencias
      run: npm install

    - name: Convertir saltos de línea a LF
      run: |
        find . -type f -name "*.js" -not -path "./node_modules/*" -not -path "./dist/*" -exec dos2unix {} \;

    - name: Ejecutar ESLint con fix
      run: npm run lint:fix

    - name: Verificar sintaxis JS
      run: |
        find . -name "*.js" -not -path "./node_modules/*" -not -path "./dist/*" -exec node -c {} \;

    - name: Ejecutar ESLint
      run: npm run lint

    - name: Verificar formato JSON
      run: |
        find . -name "*.json" -not -path "./node_modules/*" -not -path "./dist/*" -exec node -e "JSON.parse(require('fs').readFileSync('{}', 'utf8'))" \;

    - name: Verificar estructura del proyecto
      run: |
        test -f "package.json" || exit 1
        test -f "main.js" || exit 1
        test -f "index.html" || exit 1
        test -d "js" || exit 1
        test -d "js/families" || exit 1
        test -d "js/utils" || exit 1
        echo "✅ Estructura correcta"

  build-linux:
    name: Build en Linux
    runs-on: ubuntu-latest
    needs: lint
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '22.9.0'
        cache: 'npm'
    - run: npm ci
    - run: timeout 10s npm start || true
    - run: npm run dist
    - run: ls -la dist/
    - uses: actions/upload-artifact@v4
      with:
        name: electron-app-linux
        path: dist/
        retention-days: 7

  build-windows:
    name: Build en Windows
    runs-on: windows-latest
    needs: lint
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '22.9.0'
        cache: 'npm'
    - run: npm ci
    - run: timeout 10s npm start || true
    - run: npm run dist
    - run: dir dist\
    - uses: actions/upload-artifact@v4
      with:
        name: electron-app-windows
        path: dist/
        retention-days: 7

  build-macos:
    name: Build en macOS
    runs-on: macos-latest
    needs: lint
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '22.9.0'
        cache: 'npm'
    - run: npm ci
    - run: timeout 10s npm start || true
    - run: npm run dist
    - run: ls -la dist/
    - uses: actions/upload-artifact@v4
      with:
        name: electron-app-macos
        path: dist/
        retention-days: 7

  test:
    name: Ejecutar tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '22.9.0'
        cache: 'npm'
    - run: npm ci
    - run: |
        node -c main.js
        node -c server.js
        find js/ -name "*.js" -exec node -c {} \;
        echo "✅ Archivos JS verificados"

  release:
    name: Crear Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.9.0'

    - name: Instalar dependencias
      run: npm ci

    - name: Leer versión desde package.json
      id: version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Crear tag Git vX.Y.Z
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git tag v${{ steps.version.outputs.version }}
        git push origin v${{ steps.version.outputs.version }}

    - name: Crear ZIP del proyecto completo
      run: |
        mkdir -p artifacts
        zip -r artifacts/project-source-v${{ steps.version.outputs.version }}.zip . \
          -x "node_modules/**" ".git/**" "dist/**" "artifacts/**" ".github/**" "*.zip"

    - name: Descargar artefactos de builds
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Leer CHANGELOG.md para body del release
      id: changelog
      run: |
        # Lee el contenido de CHANGELOG.md (o una parte si quieres)
        # Aquí lees TODO el archivo
        cat CHANGELOG.md > changelog.txt
        # Luego lo pasamos a output multilinea
        echo "body<<EOF" >> $GITHUB_OUTPUT
        cat changelog.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Crear Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: ${{ steps.changelog.outputs.body }}
        files: |
          artifacts/electron-app-linux/**/*
          artifacts/electron-app-windows/**/*
          artifacts/electron-app-macos/**/*
          artifacts/project-source-v${{ steps.version.outputs.version }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

